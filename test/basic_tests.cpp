// Copyright (c) Dave Thaler
// SPDX-License-Identifier: MIT
#include "catch.hpp"
#include "rst2rfcxml.h"

#include <filesystem>
#include <fstream>
#include <sstream>

using namespace std;

constexpr const char* BASIC_PREAMBLE = R"(<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
  <!-- generated by https://github.com/dthaler/rst2rfcxml version 0.1 -->

<!DOCTYPE rfc [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
)";

void
test_rst2rfcxml(const char* input, const char* expected_output)
{
    rst2rfcxml rst2rfcxml;
    istringstream is(input);
    ostringstream os;
    rst2rfcxml.process_input_stream(is, os);
    rst2rfcxml.pop_contexts(0, os);
    string actual_output = os.str();
    REQUIRE(actual_output == expected_output);
}

TEST_CASE("escapes", "[basic]")
{
    test_rst2rfcxml("\\*", "<t>\n *\n</t>\n");
    test_rst2rfcxml("\\*foo\\*", "<t>\n *foo*\n</t>\n");
    test_rst2rfcxml("*foo*", "<t>\n <em>foo</em>\n</t>\n");
    test_rst2rfcxml("`foo`", "<t>\n <em>foo</em>\n</t>\n");
    test_rst2rfcxml("*foo\\*bar*", "<t>\n <em>foo*bar</em>\n</t>\n");
    test_rst2rfcxml("\\|", "<t>\n |\n</t>\n");
    test_rst2rfcxml("&", "<t>\n &amp;\n</t>\n");
    test_rst2rfcxml("<", "<t>\n &lt;\n</t>\n");
    test_rst2rfcxml(">", "<t>\n &gt;\n</t>\n");
    test_rst2rfcxml("``foo``", "<t>\n <tt>foo</tt>\n</t>\n");
    test_rst2rfcxml("\\*\\*foo\\*\\*", "<t>\n **foo**\n</t>\n");
    test_rst2rfcxml("**foo**", "<t>\n <strong>foo</strong>\n</t>\n");
    test_rst2rfcxml("**foo\\*\\*bar**", "<t>\n <strong>foo**bar</strong>\n</t>\n");
}

TEST_CASE("references", "[basic]")
{
    // Citation without reference details.
    test_rst2rfcxml("`Foo bar`_", "<t>\n <xref target=\"foo-bar\">Foo bar</xref>\n</t>\n");

    // Citation with reference details.
    test_rst2rfcxml(
        R"(
.. |ref[SAMPLE].target| replace:: https://example.com/target
`Sample reference <https://example.com/target>`_
)",
        "<t>\n <xref target=\"SAMPLE\">Sample reference</xref>\n</t>\n");

    // Fragment as part of the reference link itself.
    test_rst2rfcxml(
        R"(
.. |ref[SAMPLE].target| replace:: https://example.com/target#fragment
`Sample reference <https://example.com/target#fragment>`_
)",
        "<t>\n <xref target=\"SAMPLE\">Sample reference</xref>\n</t>\n");

    // Non-RFC reference with fragment.
    test_rst2rfcxml(
        R"(
.. |ref[SAMPLE].target| replace:: https://example.com/target
`Sample reference <https://example.com/target#fragment>`_
)",
        "<t>\n <xref target=\"SAMPLE\" section=\"fragment\" relative=\"#fragment\">Sample reference</xref>\n</t>\n");
}

TEST_CASE("rfc references", "[basic]")
{
    test_rst2rfcxml(
        R"(
.. |ref[RFC8126].target| replace:: https://www.rfc-editor.org/rfc/rfc8126.html
See `RFC 8126 section 4 <https://www.rfc-editor.org/rfc/rfc8126.html#section-4>`_ for details.
)",
        "<t>\n See <xref target=\"RFC8126\" section=\"4\"/> for details.\n</t>\n");

    test_rst2rfcxml(
        R"(
.. |ref[RFC8126].target| replace:: https://www.rfc-editor.org/rfc/rfc8126.html
See `RFC 8126, section 4 <https://www.rfc-editor.org/rfc/rfc8126.html#section-4>`_ for details.
)",
        "<t>\n See <xref target=\"RFC8126\" section=\"4\"/> for details.\n</t>\n");

    test_rst2rfcxml(
        R"(
.. |ref[RFC8126].target| replace:: https://www.rfc-editor.org/rfc/rfc8126.html
See `Section 4 of RFC 8126 <https://www.rfc-editor.org/rfc/rfc8126.html#section-4>`_ for details.
)",
        "<t>\n See <xref target=\"RFC8126\" section=\"4\"/> for details.\n</t>\n");
}

TEST_CASE("titles", "[basic]")
{
    test_rst2rfcxml("Foo\n===\n", "<section anchor=\"foo\" title=\"Foo\">\n</section>\n");
    test_rst2rfcxml("Foo\n---\n", "<section anchor=\"foo\" title=\"Foo\">\n</section>\n");
    test_rst2rfcxml("Foo\n~~~\n", "<section anchor=\"foo\" title=\"Foo\">\n</section>\n");
}

TEST_CASE("duplicate titles", "[basic]")
{
    test_rst2rfcxml(
        R"(.. header::

foo
===

bar

foo
===

baz
)", (std::string(BASIC_PREAMBLE) + R"(
<rfc ipr="" docName="" category="" submissionType="">
 <front>
 </front>
 <middle>
  <section anchor="foo" title="foo">
   <t>
    bar
   </t>
  </section>
  <section anchor="foo-" title="foo">
   <t>
    baz
   </t>
  </section>
 </middle>
</rfc>
)").c_str());
}

TEST_CASE("line block", "[basic]")
{
    test_rst2rfcxml(
        R"(
|  First line
| Second line
|
|  Fourth line
)",
        R"( First line<br/>
Second line<br/>
<br/>
 Fourth line<br/>
)");
}

TEST_CASE("code block", "[basic]")
{
    test_rst2rfcxml(
        R"(
.. code-block::

   foo
      bar
   z = (2 * x < y) + (3 * (a & b) > c)

done
)",
        R"(<sourcecode>
foo
   bar
z = (2 * x &lt; y) + (3 * (a &amp; b) &gt; c)
</sourcecode>
<t>
 done
</t>
)");
}

TEST_CASE("comment", "[basic]")
{
    test_rst2rfcxml(
        R"(
..
   This whole indented block
   is a comment.

   Still in the comment.

done
)",
        R"(<!--
 This whole indented block
 is a comment.
 
 Still in the comment.
 
-->
<t>
 done
</t>
)");
}

TEST_CASE("artwork", "[basic]")
{
    test_rst2rfcxml(
        R"(
Paragraph:

::

     Literal
  block of text
  (2 * x < y) + (3 * (a & b) > c)

done
)",
        R"(<t>
 Paragraph:
</t>
<artwork>
   Literal
block of text
(2 * x &lt; y) + (3 * (a &amp; b) &gt; c)
</artwork>
<t>
 done
</t>
)");

    test_rst2rfcxml(
        R"(
Paragraph: ::

  Literal block
     of text

done
)",
        R"(<t>
 Paragraph:
</t>
<artwork>
Literal block
   of text
</artwork>
<t>
 done
</t>
)");

    test_rst2rfcxml(
        R"(
Paragraph::

  Literal block
     of text

done
)",
        R"(<t>
 Paragraph:
</t>
<artwork>
Literal block
   of text
</artwork>
<t>
 done
</t>
)");
}

TEST_CASE("artwork simple end", "[basic]")
{
    test_rst2rfcxml(
        R"(
This is a diagram::

    +-+-+-+-+-+-+-+-+
    |src_reg|dst_reg|
    +-+-+-+-+-+-+-+-+

This is not part of the diagram.
)",
        R"(<t>
 This is a diagram:
</t>
<artwork>
+-+-+-+-+-+-+-+-+
|src_reg|dst_reg|
+-+-+-+-+-+-+-+-+
</artwork>
<t>
 This is not part of the diagram.
</t>
)");
}

TEST_CASE("artwork complex end", "[basic]")
{
    test_rst2rfcxml(R"(
**regs**
  The source and destination register numbers, encoded as follows
  on a little-endian host::

    +-+-+-+-+-+-+-+-+
    |src_reg|dst_reg|
    +-+-+-+-+-+-+-+-+

  and as follows on a big-endian host::

    +-+-+-+-+-+-+-+-+
    |dst_reg|src_reg|
    +-+-+-+-+-+-+-+-+

  **src_reg**
    the source register number (0-10), except where otherwise specified

  **dst_reg**
    destination register number (0-10)

**offset**
  signed integer offset used with pointer arithmetic
)", R"(<dl>
 <dt anchor="term---regs--">
  <strong>regs</strong>
 </dt>
 <dd>
  <t>
   The source and destination register numbers, encoded as follows
   on a little-endian host:
  </t>
  <artwork>
+-+-+-+-+-+-+-+-+
|src_reg|dst_reg|
+-+-+-+-+-+-+-+-+
  </artwork>
  <t>
   and as follows on a big-endian host:
  </t>
  <artwork>
+-+-+-+-+-+-+-+-+
|dst_reg|src_reg|
+-+-+-+-+-+-+-+-+
  </artwork>
  <dl>
   <dt anchor="term---src_reg--">
    <strong>src_reg</strong>
   </dt>
   <dd>
    <t>
     the source register number (0-10), except where otherwise specified
    </t>
   </dd>
   <dt anchor="term---dst_reg--">
    <strong>dst_reg</strong>
   </dt>
   <dd>
    <t>
     destination register number (0-10)
    </t>
   </dd>
  </dl>
 </dd>
 <dt anchor="term---offset--">
  <strong>offset</strong>
 </dt>
 <dd>
  <t>
   signed integer offset used with pointer arithmetic
  </t>
 </dd>
</dl>
)");
}

TEST_CASE("aside", "[basic]")
{
    test_rst2rfcxml(
        R"(
.. admonition:: Example

  This is an example.

Done with admonition.
)",
        R"(<aside>
 <t><strong>Example</strong></t>
 <t>
  This is an example.
 </t>
</aside>
<t>
 Done with admonition.
</t>
)");
}

TEST_CASE("block quote", "[basic]")
{
    test_rst2rfcxml(
        R"(
Following is a block quote:

  This is quoted text
  that goes in a block quote.

done
)",
        R"(<t>
 Following is a block quote:
</t>
<blockquote>
 This is quoted text
 that goes in a block quote.
</blockquote>
<t>
 done
</t>
)");
}

TEST_CASE("definition list", "[basic]")
{
    test_rst2rfcxml(
        R"(
foo
  description

bar
  description

baz :term:`foo-ish<foo>` baz
)",
        R"(<dl>
 <dt anchor="term-foo">
  foo
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
 <dt anchor="term-bar">
  bar
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
</dl>
<t>
 baz <xref target="term-foo">foo-ish</xref> baz
</t>
)");
}

TEST_CASE("definition list duplication", "[basic]")
{
    test_rst2rfcxml(
        R"(
foo
  description

bar
  description

baz :term:`foo-ish<foo>` baz

foo
  description 2

bar
  description 2

baz :term:`foo-ish<foo>` baz

foo
  description 3

bar
  description 3

baz :term:`foo-ish<foo>` baz

)",
        R"(<dl>
 <dt anchor="term-foo">
  foo
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
 <dt anchor="term-bar">
  bar
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
</dl>
<t>
 baz <xref target="term-foo">foo-ish</xref> baz
</t>
<dl>
 <dt anchor="term-foo-">
  foo
 </dt>
 <dd>
  <t>
   description 2
  </t>
 </dd>
 <dt anchor="term-bar-">
  bar
 </dt>
 <dd>
  <t>
   description 2
  </t>
 </dd>
</dl>
<t>
 baz <xref target="term-foo-">foo-ish</xref> baz
</t>
<dl>
 <dt anchor="term-foo--">
  foo
 </dt>
 <dd>
  <t>
   description 3
  </t>
 </dd>
 <dt anchor="term-bar--">
  bar
 </dt>
 <dd>
  <t>
   description 3
  </t>
 </dd>
</dl>
<t>
 baz <xref target="term-foo--">foo-ish</xref> baz
</t>
)");
}

TEST_CASE("definition list with glossary label", "[basic]")
{
    test_rst2rfcxml(
        R"(
.. glossary::

    foo
      description

    bar
      description

done :term:`foo` done
)",
        R"(<dl>
 <dt anchor="term-foo">
  foo
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
 <dt anchor="term-bar">
  bar
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
</dl>
<t>
 done <xref target="term-foo">foo</xref> done
</t>
)");
}

TEST_CASE("bold definition list", "[basic]")
{
    test_rst2rfcxml(
        R"(
**foo**
  description

**bar**
  description

baz
)",
        R"(<dl>
 <dt anchor="term---foo--">
  <strong>foo</strong>
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
 <dt anchor="term---bar--">
  <strong>bar</strong>
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
</dl>
<t>
 baz
</t>
)");
}

TEST_CASE("italic definition list", "[basic]")
{
    test_rst2rfcxml(
        R"(
*foo*
  description

*bar*
  description

baz
)",
        R"(<dl>
 <dt anchor="term--foo-">
  <em>foo</em>
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
 <dt anchor="term--bar-">
  <em>bar</em>
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
</dl>
<t>
 baz
</t>
)");
}

TEST_CASE("table", "[basic]")
{
    test_rst2rfcxml(
        R"(

====  ===============
Name  Description
====  ===============
Foo   Example
Bar   Another example
      Second line
====  ===============

)",
        R"(<table>
 <thead>
  <tr>
   <th>Name</th>
   <th>Description</th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <td>
    <t>
     Foo
    </t>
   </td>
   <td>
    <t>
     Example
    </t>
   </td>
  </tr>
  <tr>
   <td>
    <t>
     Bar
    </t>
   </td>
   <td>
    <t>
     Another example
     Second line
    </t>
   </td>
  </tr>
 </tbody>
</table>
)");
}

TEST_CASE("table centered", "[basic]")
{
    test_rst2rfcxml(
        R"(

======  =====  ==============================================
source  value  description
======  =====  ==============================================
  K       0    use 32-bit 'imm' value as source operand
  X       1    use 'src_reg' register value as source operand
======  =====  ==============================================

)",
        R"(<table>
 <thead>
  <tr>
   <th>source</th>
   <th>value</th>
   <th>description</th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <td>
    <blockquote>
     K
    </blockquote>
   </td>
   <td>
    <blockquote>
     0
    </blockquote>
   </td>
   <td>
    <t>
     use 32-bit 'imm' value as source operand
    </t>
   </td>
  </tr>
  <tr>
   <td>
    <blockquote>
     X
    </blockquote>
   </td>
   <td>
    <blockquote>
     1
    </blockquote>
   </td>
   <td>
    <t>
     use 'src_reg' register value as source operand
    </t>
   </td>
  </tr>
 </tbody>
</table>
)");
}

TEST_CASE("table with literal cell", "[basic]")
{
    test_rst2rfcxml(
        R"(

====  ===============
Name  Description
====  ===============
Foo   Example::

        *x* &y& <z>
Bar   Another example
====  ===============

)",
        R"(<table>
 <thead>
  <tr>
   <th>Name</th>
   <th>Description</th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <td>
    <t>
     Foo
    </t>
   </td>
   <td>
    <t>
     Example:
    </t>
    <artwork>
*x* &amp;y&amp; &lt;z&gt;
    </artwork>
   </td>
  </tr>
  <tr>
   <td>
    <t>
     Bar
    </t>
   </td>
   <td>
    <t>
     Another example
    </t>
   </td>
  </tr>
 </tbody>
</table>
)");
}

TEST_CASE("table with caption", "[basic]")
{
    test_rst2rfcxml(
        R"(

.. table:: Caption.

  ====  ===============
  Name  Description
  ====  ===============
  Foo   Example
  Bar   Another example
        Second line
  ====  ===============

)",
        R"(<table>
 <name>Caption.</name>
 <thead>
  <tr>
   <th>Name</th>
   <th>Description</th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <td>
    <t>
     Foo
    </t>
   </td>
   <td>
    <t>
     Example
    </t>
   </td>
  </tr>
  <tr>
   <td>
    <t>
     Bar
    </t>
   </td>
   <td>
    <t>
     Another example
     Second line
    </t>
   </td>
  </tr>
 </tbody>
</table>
)");
}

TEST_CASE("definition list with table", "[basic]")
{
    test_rst2rfcxml(
        R"(
foo
  Here's a table:

    ====  ====
    xyz   abc
    ====  ====
    1     11
    2     12
    ====  ====

  and some more discussion.

bar
  description

baz
)",
        R"(<dl>
 <dt anchor="term-foo">
  foo
 </dt>
 <dd>
  <t>
   Here's a table:
  </t>
  <table>
   <thead>
    <tr>
     <th>xyz</th>
     <th>abc</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td>
      <t>
       1
      </t>
     </td>
     <td>
      <t>
       11
      </t>
     </td>
    </tr>
    <tr>
     <td>
      <t>
       2
      </t>
     </td>
     <td>
      <t>
       12
      </t>
     </td>
    </tr>
   </tbody>
  </table>
  <t>
   and some more discussion.
  </t>
 </dd>
 <dt anchor="term-bar">
  bar
 </dt>
 <dd>
  <t>
   description
  </t>
 </dd>
</dl>
<t>
 baz
</t>
)");
}

TEST_CASE("unordered list", "[basic]")
{
    test_rst2rfcxml(
        R"(
* One

  * Alpha
  * Beta

* Two

done
)",
        R"(<ul>
 <li>
  One
  <ul>
   <li>
    Alpha
   </li>
   <li>
    Beta
   </li>
  </ul>
 </li>
 <li>
  Two
 </li>
</ul>
<t>
 done
</t>
)");
}

TEST_CASE("unordered list extended", "[basic]")
{
    test_rst2rfcxml(
        R"(
* One
* Two with a continuation
  of the same line.
)",
        R"(<ul>
 <li>
  One
 </li>
 <li>
  Two with a continuation
  of the same line.
 </li>
</ul>
)");
}

TEST_CASE("ordered list", "[basic]")
{
    test_rst2rfcxml(
        R"(
1. One

   1. Alpha
   2. Beta

2. Two

done
)",
        R"(<ol>
 <li>
  One
  <ol>
   <li>
    Alpha
   </li>
   <li>
    Beta
   </li>
  </ol>
 </li>
 <li>
  Two
 </li>
</ol>
<t>
 done
</t>
)");
}

TEST_CASE("ordered list with hash", "[basic]")
{
    test_rst2rfcxml(
        R"(
#. One
#. Two
   continued
)",
        R"(<ol>
 <li>
  One
 </li>
 <li>
  Two
  continued
 </li>
</ol>
)");
}

TEST_CASE("text", "[basic]")
{
    test_rst2rfcxml(
        R"(
Paragraph one.

Paragraph two.
)",
        R"(<t>
 Paragraph one.
</t>
<t>
 Paragraph two.
</t>
)");
}

TEST_CASE("empty header", "[basic]")
{
    string expected_output = BASIC_PREAMBLE;
    expected_output += R"(
<rfc ipr="" docName="" category="" submissionType="">
 <front>
 </front>
</rfc>
)";
    test_rst2rfcxml(".. header::", expected_output.c_str());
}

TEST_CASE("common header", "[basic]")
{
    string expected_output = BASIC_PREAMBLE;
    expected_output += R"(
<rfc ipr="trust200902" docName="draft-sample-test-00" category="std" submissionType="IETF">
 <front>
  <title abbrev="Abbreviated Title">
My Title
  </title>
  <author initials="J." asciiInitials="J." surname="Doe" asciiSurname="Doe" fullname="John Doe" role="editor" asciiFullname="John Doe">
    <organization>ACME</organization>
   <address>
    <postal>
    <city>Anytown</city>
    <code>12345</code>
    <country>USA</country>
    <region>State</region>
    <street>123 Main St</street>
    </postal>
    <phone>555-1212</phone>
    <email>johndoe@example.com</email>
   </address>
  </author>
  <abstract>
   <t>
    My abstract
   </t>
  </abstract>
 </front>
</rfc>
)";
    test_rst2rfcxml(
        R"(
.. |docName| replace:: draft-sample-test-00
.. |ipr| replace:: trust200902
.. |category| replace:: std
.. |titleAbbr| replace:: Abbreviated Title
.. |submissionType| replace:: IETF
.. |author[0].fullname| replace:: John Doe
.. |author[0].asciiFullname| replace:: John Doe
.. |author[0].role| replace:: editor
.. |author[0].surname| replace:: Doe
.. |author[0].asciiSurname| replace:: Doe
.. |author[0].initials| replace:: J.
.. |author[0].asciiInitials| replace:: J.
.. |author[0].organization| replace:: ACME
.. |author[0].email| replace:: johndoe@example.com
.. |author[0].phone| replace:: 555-1212
.. |author[0].city| replace:: Anytown
.. |author[0].code| replace:: 12345
.. |author[0].country| replace:: USA
.. |author[0].region| replace:: State
.. |author[0].street| replace:: 123 Main St
.. header::

========
My Title
========

My abstract
)",
        expected_output.c_str());
}

TEST_CASE("postalLine header", "[basic]")
{
    string expected_output = BASIC_PREAMBLE;
    expected_output += R"(
<rfc ipr="trust200902" docName="draft-sample-test-00" category="std" submissionType="IETF">
 <front>
  <title abbrev="Abbreviated Title">
My Title
  </title>
  <author initials="J." asciiInitials="J." surname="Doe" asciiSurname="Doe" fullname="John Doe" role="editor" asciiFullname="John Doe">
    <organization>ACME</organization>
   <address>
    <postal>
    <postalLine>123 Main St</postalLine>
    <postalLine>Anytown, State 12345</postalLine>
    </postal>
    <phone>555-1212</phone>
    <email>johndoe@example.com</email>
   </address>
  </author>
  <abstract>
   <t>
    My abstract
   </t>
  </abstract>
 </front>
</rfc>
)";
    test_rst2rfcxml(
        R"(
.. |docName| replace:: draft-sample-test-00
.. |ipr| replace:: trust200902
.. |category| replace:: std
.. |titleAbbr| replace:: Abbreviated Title
.. |submissionType| replace:: IETF
.. |author[0].fullname| replace:: John Doe
.. |author[0].asciiFullname| replace:: John Doe
.. |author[0].role| replace:: editor
.. |author[0].surname| replace:: Doe
.. |author[0].asciiSurname| replace:: Doe
.. |author[0].initials| replace:: J.
.. |author[0].asciiInitials| replace:: J.
.. |author[0].organization| replace:: ACME
.. |author[0].email| replace:: johndoe@example.com
.. |author[0].phone| replace:: 555-1212
.. |author[0].postalLine| replace:: 123 Main St
.. |author[0].postalLine| replace:: Anytown, State 12345
.. header::

========
My Title
========

My abstract
)",
        expected_output.c_str());
}

TEST_CASE("sample with prologue", "[basic]")
{
    // Find path to sample.rst.
    constexpr int MAX_DEPTH = 4;
    filesystem::path path = ".";
    int depth;
    for (depth = 0; (depth <= MAX_DEPTH) && !filesystem::exists(path.string() + "/sample/sample.rst"); depth++) {
        path /= "..";
    }
    REQUIRE(depth <= MAX_DEPTH);
    path += "/sample/";

    // Process sample input files.
    vector<string> input_filenames = {path.string() + "sample-prologue.rst", path.string() + "sample.rst"};
    rst2rfcxml rst2rfcxml;
    ostringstream os;
    REQUIRE(rst2rfcxml.process_files(input_filenames, os) == 0);
    rst2rfcxml.pop_contexts(0, os);
    string actual_output = os.str();

    // Get the expected output.
    ifstream expected_output_file(path.string() + "sample.xml");
    std::string expected_output(
        (std::istreambuf_iterator<char>(expected_output_file)), std::istreambuf_iterator<char>());

    REQUIRE(actual_output == expected_output);
}

TEST_CASE("sample with skeleton", "[basic]")
{
    // Find path to sample.rst.
    constexpr int MAX_DEPTH = 4;
    filesystem::path path = ".";
    int depth;
    for (depth = 0; (depth <= MAX_DEPTH) && !filesystem::exists(path.string() + "/sample/sample.rst"); depth++) {
        path /= "..";
    }
    REQUIRE(depth <= MAX_DEPTH);
    path += "/sample/";

    // Process sample input files.
    vector<string> input_filenames = {path.string() + "sample-skeleton.rst"};
    rst2rfcxml rst2rfcxml;
    ostringstream os;
    REQUIRE(rst2rfcxml.process_files(input_filenames, os) == 0);
    rst2rfcxml.pop_contexts(0, os);
    string actual_output = os.str();

    // Get the expected output.
    ifstream expected_output_file(path.string() + "sample.xml");
    std::string expected_output(
        (std::istreambuf_iterator<char>(expected_output_file)), std::istreambuf_iterator<char>());

    REQUIRE(actual_output == expected_output);
}
